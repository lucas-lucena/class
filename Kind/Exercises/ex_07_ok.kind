//Bits

//File for exercises in Bits

//e = empty
//o = 0
//i = 1
type Bits { 
  e
  o(pred: Bits)
  i(pred: Bits)
}

//a = Bits.i(Bits.i(Bits.e))
//b = Bits.o(Bits.i(Bits.i(Bits.e)))
//c = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
//d = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))


//Verifies if it is an Empty Bit

//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
is_empty(b: Bits): Bool
  ?is_empty



//Gets the Tail of a Bits structure

//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
tail(b: Bits): Bits
  ?tail


//Negates all Bits

//not(a) -> Bits.o(Bits.o(Bits.e))
//not(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//not(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//not(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
not(b: Bits): Bits
  ?not




//Increments a Bit

//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
inc(b: Bits): Bits
  ?inc



//Decrements a Bit

//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
dec(b: Bits): Bits
  ?dec




//Concatenate two Bits structures

//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
concat(a: Bits, b: Bits): Bits
  ?concat



//Adds two Bits structures

//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.o(Bits.e))))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.o(Bits.i(Bits.e))))))
add(a: Bits, b: Bits): Bits 
  ?add



//Returns Bits.i if only both bits are Bits.i

//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
and(a: Bits, b: Bits): Bits
  ?and



//Returns Bits.i if any of bits are Bits.i

//or(a,b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
or(a: Bits, b: Bits): Bits
  ?or



//Verifies if both Bit structures are equal

//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
eql(a: Bits, b: Bits): Bool
  ?eql



//Reverses a Bits structure

reverse_go(b: Bits, acum: Bits): Bits
  ?reverse_go
  


//reverse(a) -> Bits.i(Bits.i(Bits.e))
//reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
//reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
reverse(b: Bits): Bits
  reverse_go(b, Bits.e)




//Gets the length of the Bits structure

length_go(bs: Bits, acum: Nat): Nat
  ?length_go




//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> 4
length(bs: Bits): Nat
  length_go(bs, 0)



//Multiplies two Bits structures

mul_go(a: Bits, b: Bits, acum: Bits): Bits
  ?mul_go


//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
mul(a: Bits, b: Bits): Bits
  mul_go(a, b, Bits.e)



//Drops a n Number of Bits starting from from the least significative bit

//drop(a) -> Bits.i(Bits.e)
//drop(b) -> Bits.i(Bits.i(Bits.e))
//drop(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
drop(n: Nat, bs: Bits): Bits
  ?drop
  


//Takes n Bits from the structure, starting from the least significative bit

//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
take(n: Nat, bs: Bits): Bits
  ?take
// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs ys {
    cons cons: List.cons<Pair<A,B>>(Pair.new<A,B>(xs.head, ys.head), zip<A,B>(xs.tail, ys.tail))
  }
  default List.nil<Pair<A,B>>

// ex_07:_ 
//   zip!!(List.cons!(1,List.nil!), List.cons!(2,List.nil!))
// Returns the smallest element of a List
smallest(xs: List<Nat>): Nat
  case xs {
    nil: 99999
    cons: minimo(xs.head, smallest(xs.tail))
  }
minimo(a: Nat, b: Nat): Nat
  case ltn(a,b){
    true: a
    false: b
  }
ltn(a: Nat, b: Nat): Bool
  case a b {
    zero succ: true
    succ succ: ltn(a.pred, b.pred)
  }
  default false

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  let smallest = smallest(xs)
  delete_smallest.aux(smallest, xs)

delete_smallest.aux(s: Nat, xs: List<Nat>): List<Nat>
  case xs {
    nil: List.nil<Nat>
    cons: case eql(s, xs.head) {
      true: xs.tail
      false: List.cons<Nat>(xs.head, delete_smallest.aux(s, xs.tail))
    }
  }
eql(a: Nat, b: Nat): Bool 
  case a b {
    zero zero: true
    succ succ: eql(a.pred, b.pred)
  }
  default false 
 
// ex_07:_ 
//   delete_smallest(List.cons!(1,List.cons!(1,List.cons!(2,List.nil!))))
// Returns the same list, in ascending order
// [1, 2 , 4, 6, 7, 30]
sort_ascending(xs: List<Nat>): List<Nat>
  case xs {
    nil:  List.nil<Nat>
    cons: case xs.tail {
      nil:  xs
      cons: case ltn(xs.head, xs.tail.head) {
        true:  List.cons<Nat>(xs.head, sort_ascending(xs.tail))
        false: sort_ascending(List.cons<Nat>(xs.tail.head, sort_ascending(List.cons<Nat>(xs.head, xs.tail.tail))))
      } 
    }
  }
// ex_07:_ 
//   List.show!(Nat.show,sort_ascending(
//     List.cons<Nat>(5, 
//     List.cons<Nat>(3, 
//     List.cons<Nat>(4,
//     List.cons<Nat>(2,
//     List.nil<Nat>)))))) 

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  case idx xs {
    succ cons: get<A>(idx.pred, xs.tail)
    zero cons: Maybe.some!(xs.head)  
  }
  default Maybe.none!

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs {
    nil:  List.nil<A>
    cons: case f(xs.head) {
      true:  List.cons<A>(xs.head, filter<A>(f, xs.tail))
      false: filter<A>(f, xs.tail)
    }
  }

