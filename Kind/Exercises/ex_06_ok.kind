// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil:  List.nil<A>
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil: Nat.zero
    cons: Nat.succ(length<A>(xs.tail))
  }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
    nil: case ys {
      nil: List.nil<A>
      cons: List.cons<A>(ys.head, concat<A>(List.nil<A>, ys.tail))
    }
    cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys))
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil: List.nil<B>
    cons: List.cons<B>(fn(xs.head), map<A,B>(fn, xs.tail))
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go<A>(List.nil<A>, xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil:  new_list
    cons: reverse.go<A>(List.cons<A>(old_list.head, new_list), old_list.tail)
  }

// ex_06:_
//   reverse!(List.cons!(1, List.cons!(2, List.nil!)))
  // concat!(List.cons!(1,List.cons!(2,List.nil!), List.cons!(3,List.cons!(4,List.nil!)))
  // map!!(inc, List.cons!(1,List.cons!(2,List.nil!)))
// inc(a: Nat): Nat // <-Aqui jogas, e savio!  
//   Nat.succ(a)